# 来源 https://github.com/OS984/DiscordBotBackend/blob/3b06b8be39e4dbc07722b0afefeee4c18c136102/NeuralTTS.py
# A completely innocent attempt to borrow proprietary Microsoft technology for a much better TTS experience
import requests
import websockets
import asyncio
from datetime import datetime
import time
import re
import uuid
import argparse
import _thread

from os import path
from pydub import AudioSegment

import websocket as ws

ttsServer = object()

class TTSServer():
    def __init__(self):
        print('start init')
        self.connect_websocket()


    async def connect_websocket(self):
        start = getXTime()
        print("\nauth time start: " + start + "\n")
        endpoint1 = "https://azure.microsoft.com/en-gb/services/cognitive-services/text-to-speech/"
        r = requests.get(endpoint1)
        main_web_content = r.text
        # They hid the Auth key assignment for the websocket in the main body of the webpage....
        token_expr = re.compile('token: \"(.*?)\"', re.DOTALL)
        Auth_Token = re.findall(token_expr, main_web_content)[0]
        # req_id = str('%032x' % random.getrandbits(128)).upper()
        # req_id is generated by uuid.
        req_id = uuid.uuid4().hex.upper()
        print(req_id)
        endpoint2 = "wss://eastus.tts.speech.microsoft.com/cognitiveservices/websocket/v1?Authorization=" + \
            Auth_Token + "&X-ConnectionId=" + req_id
        # self.websocket = websockets.connect(endpoint2)
        async with websockets.connect(endpoint2) as self.websocket:
            payload_1 = '{"context":{"system":{"name":"SpeechSDK","version":"1.12.1-rc.1","build":"JavaScript","lang":"JavaScript","os":{"platform":"Browser/Linux x86_64","name":"Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0","version":"5.0 (X11)"}}}}'
            message_1 = 'Path : speech.config\r\nX-RequestId: ' + req_id + '\r\nX-Timestamp: ' + \
                getXTime() + '\r\nContent-Type: application/json\r\n\r\n' + payload_1
            await self.websocket.send(message_1)

            payload_2 = '{"synthesis":{"audio":{"metadataOptions":{"sentenceBoundaryEnabled":false,"wordBoundaryEnabled":false},"outputFormat":"audio-16khz-32kbitrate-mono-mp3"}}}'
            message_2 = 'Path : synthesis.context\r\nX-RequestId: ' + req_id + '\r\nX-Timestamp: ' + \
                getXTime() + '\r\nContent-Type: application/json\r\n\r\n' + payload_2
            await self.websocket.send(message_2)

    async def start_conver(self, content:str, fd:object):
        start = getXTime()
        print("\nauth time end:" + start +"\n")

        spd='0'
        ptc='0'
        voice='zh-CN-XiaoxiaoNeural'
        #msg_content=' 这是普渡自研究语音链路，普渡科技'
        payload_3 = '<speak xmlns="http://www.w3.org/2001/10/synthesis" xmlns:mstts="http://www.w3.org/2001/mstts" xmlns:emo="http://www.w3.org/2009/10/emotionml" version="1.0" xml:lang="en-US"><voice name="' + voice + '"><prosody rate="'+spd+'%" pitch="'+ptc+'%">'+ content +'</prosody></voice></speak>'
        #print(payload_3)
        #payload_3 = SSML_text
        #print(payload_3)
        message_3 = 'Path: ssml\r\nX-RequestId: ' + req_id + '\r\nX-Timestamp: ' + \
            getXTime() + '\r\nContent-Type: application/ssml+xml\r\n\r\n' + payload_3
        await self.websocket.send(message_3)
        start = getXTime()
        print(start)

        # Checks for close connection message
        end_resp_pat = re.compile('Path:turn.end')
        audio_stream = b''
        while(True):
            response = await self.websocket.recv()
            end = getXTime()
            #print(end - start)
            #print('receiving...')
            # Make sure the message isn't telling us to stop
            if (re.search(end_resp_pat, str(response)) == None):
                # Check if our response is text data or the audio bytes
                if type(response) == type(bytes()):
                    # Extract binary data
                    try:
                        start_ind = str(response).find('Path:audio')
                        #audio_string += str(response)[start_ind+14:-1]
                        tmp = response[start_ind-2:]
                        audio_stream += tmp
                        #print(audio_stream, type(audio_stream))
                        #await ws_fd.send(tmp)
                        #print(len(tmp))
                    except:
                        pass
            else:
                break
        start = getXTime()
        print("\n recv time end:" + start +"\n")
        outputPath = 'output_'+ str(int(time.time()*1000))
        with open(f'{outputPath}.mp3', 'wb') as audio_out:
            audio_out.write(audio_stream)
        sound = AudioSegment.from_mp3(f'{outputPath}.mp3')
        sound = sound.set_channels(2)
        sound.export(f'{outputPath}.wav', format="wav")
        url= 'http://192.168.73.249:8000/' + f'{outputPath}.wav'
        with open(f'{outputPath}.wav', 'rb') as f:
            res = f.read(44)
            while True:
                res = f.read(1024)
                if len(res) == 0:
                    break
                await fd.send(res)

# Fix the time to match Americanisms
def hr_cr(hr):
    corrected = (hr - 1) % 24
    return str(corrected)

# Add zeros in the right places i.e 22:1:5 -> 22:01:05
def fr(input_string):
    corr = ''
    i = 2 - len(input_string)
    while (i > 0):
        corr += '0'
        i -= 1
    return corr + input_string

# Generate X-Timestamp all correctly formatted
def getXTime():
    now = datetime.now()
    return fr(str(now.year)) + '-' + fr(str(now.month)) + '-' + fr(str(now.day)) + 'T' + fr(hr_cr(int(now.hour))) + ':' + fr(str(now.minute)) + ':' + fr(str(now.second)) + '.' + str(now.microsecond)[:3] + 'Z'

'''
# Async function for actually communicating with the websocket
async def transferMsTTSData(SSML_text, outputPath, ws_fd):
    global msg_content
    start = getXTime()
    print("\nauth time start: " + start + "\n")
    endpoint1 = "https://azure.microsoft.com/en-gb/services/cognitive-services/text-to-speech/"
    r = requests.get(endpoint1)
    main_web_content = r.text
    # They hid the Auth key assignment for the websocket in the main body of the webpage....
    token_expr = re.compile('token: \"(.*?)\"', re.DOTALL)
    Auth_Token = re.findall(token_expr, main_web_content)[0]
    # req_id = str('%032x' % random.getrandbits(128)).upper()
    # req_id is generated by uuid.
    req_id = uuid.uuid4().hex.upper()
    print(req_id)
    endpoint2 = "wss://eastus.tts.speech.microsoft.com/cognitiveservices/websocket/v1?Authorization=" + \
        Auth_Token + "&X-ConnectionId=" + req_id
    async with websockets.connect(endpoint2) as websocket:
        payload_1 = '{"context":{"system":{"name":"SpeechSDK","version":"1.12.1-rc.1","build":"JavaScript","lang":"JavaScript","os":{"platform":"Browser/Linux x86_64","name":"Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0","version":"5.0 (X11)"}}}}'
        message_1 = 'Path : speech.config\r\nX-RequestId: ' + req_id + '\r\nX-Timestamp: ' + \
            getXTime() + '\r\nContent-Type: application/json\r\n\r\n' + payload_1
        await websocket.send(message_1)

        payload_2 = '{"synthesis":{"audio":{"metadataOptions":{"sentenceBoundaryEnabled":false,"wordBoundaryEnabled":false},"outputFormat":"audio-16khz-32kbitrate-mono-mp3"}}}'
        message_2 = 'Path : synthesis.context\r\nX-RequestId: ' + req_id + '\r\nX-Timestamp: ' + \
            getXTime() + '\r\nContent-Type: application/json\r\n\r\n' + payload_2
        await websocket.send(message_2)


        start = getXTime()
        print("\nauth time end:" + start +"\n")
        
        spd='0'
        ptc='0'
        voice='zh-CN-XiaoxiaoNeural'
        #msg_content=' 这是普渡自研究语音链路，普渡科技'
        payload_3 = '<speak xmlns="http://www.w3.org/2001/10/synthesis" xmlns:mstts="http://www.w3.org/2001/mstts" xmlns:emo="http://www.w3.org/2009/10/emotionml" version="1.0" xml:lang="en-US"><voice name="' + voice + '"><prosody rate="'+spd+'%" pitch="'+ptc+'%">'+ msg_content +'</prosody></voice></speak>'
        #print(payload_3)
        #payload_3 = SSML_text
        #print(payload_3)
        message_3 = 'Path: ssml\r\nX-RequestId: ' + req_id + '\r\nX-Timestamp: ' + \
            getXTime() + '\r\nContent-Type: application/ssml+xml\r\n\r\n' + payload_3
        await websocket.send(message_3)
        start = getXTime()
        print(start)

        # Checks for close connection message
        end_resp_pat = re.compile('Path:turn.end')
        audio_stream = b''
        while(True):
            response = await websocket.recv()
            end = getXTime()
            #print(end - start)
            #print('receiving...')
            # Make sure the message isn't telling us to stop
            if (re.search(end_resp_pat, str(response)) == None):
                # Check if our response is text data or the audio bytes
                if type(response) == type(bytes()):
                    # Extract binary data
                    try:
                        start_ind = str(response).find('Path:audio')
                        #audio_string += str(response)[start_ind+14:-1]
                        tmp = response[start_ind-2:]
                        audio_stream += tmp
                        #print(audio_stream, type(audio_stream))
                        #await ws_fd.send(tmp)
                        #print(len(tmp))
                    except:
                        pass
            else:
                break
        start = getXTime()
        print("\n recv time end:" + start +"\n")
        with open(f'{outputPath}.mp3', 'wb') as audio_out:
            audio_out.write(audio_stream)
        sound = AudioSegment.from_mp3(f'{outputPath}.mp3')
        sound = sound.set_channels(2)
        sound.export(f'{outputPath}.wav', format="wav")
        url= 'http://192.168.73.249:8000/' + f'{outputPath}.wav'
        with open(f'{outputPath}.wav', 'rb') as f:
            res = f.read(44)
            while True:
                res = f.read(1024)
                if len(res) == 0:
                    break
                await ws_fd.send(res)

'''

async def mainSeq(SSML_text, outputPath, fd):
    # await transferMsTTSData(SSML_text, outputPath, fd)
    await ttsServer.start_conver(SSML_text, fd)

def get_SSML(path):
    with open(path,'r',encoding='utf-8') as f:
        return f.read()

async def gate(ws):
    '''
    while True:
        msg_content = await ws.recv()
    '''
    global msg_content
    async for message in ws:
        if message == '':
            message = '内容不能为空'
        msg_content = message
        print(f'recv: {message}')
        # SSML_text=0
        output_path = 'output_'+ str(int(time.time()*1000))
        # await mainSeq(SSML_text, output_path, ws)
        await mainSeq(msg_content, output_path, ws)
        print('exit')
        await ws.send(b'\x03\xe8')


    '''
    msg_content = await ws.recv()
    print(f'recv: {msg_content}')
    SSML_text=0
    output_path = 'output_'+ str(int(time.time()*1000))
    await mainSeq(SSML_text, output_path)
    print('-----exit')
    '''
async def main():
    async with websockets.serve(gate, "192.168.73.249", 8766, max_size = 10752000):
        await asyncio.Future()  # run forever

if __name__ == "__main__":
    ttsServer = TTSServer()
    asyncio.run(main())
    print('completed')
